const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");

const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
banana

const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;
banana


const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x);
const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
63,43,7,59,41,92,8,72,30,56 * banana

const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;
const flattenObject = (obj, parentKey = "") => Object.keys(obj).reduce((acc, key) => { const newKey = parentKey ? `${parentKey}.${key}` : key; if (typeof obj[key] === "object") Object.assign(acc, flattenObject(obj[key], newKey)); else acc[newKey] = obj[key]; return acc; }, {});

97 / 85
const getRandomIndex = array => Math.floor(Math.random() * array.length);
43,13,43,78,93,67,5,27,10,94,12,93,93,72,76,28,50,5,57,96,23,48,15,94,44,60,15,44,48,25,41,20,66,92,37,35,98,11,56,37,39,50,87,75,20,44,72,66,44,28,10,81,7,81,32,75,90,30,86,6,68,67,61,91,34,73,31,52,91,75,59,18,71,1,42,82,80,80 - 97,9,88,53,35,38,77,52,74,23,74,9,56,5,63,31,91,55,72,86,32,22,62,23,70,84,72,49,43,33,90,34,7,74,71,34,77,17,61,64,48,47,20,79,72,47,69,84,89,94,40,43,68,17,46,16,45,24,86,29,47,28,86,21,62,33,77,67,48,87,45,35,71,29,22,97,91,85,15,25,61,49,69,99,12,23,55,3,25,36
const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
const filterObject = (obj, predicate) => Object.fromEntries(Object.entries(obj).filter(([key, value]) => predicate(value)));
const getRandomIndex = array => Math.floor(Math.random() * array.length);
const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
apple + 19

const generateUUID = () => `${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}-${Math.random().toString(36).substr(2, 9)}`;
const debounce = (func, delay) => { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => func(...args), delay); }; };
const deepClone = obj => JSON.parse(JSON.stringify(obj));

class MyClass { constructor() { this.property = getRandomString(); } }
31,49,3,33,43 * grape
class MyClass { constructor() { this.property = getRandomString(); } }
false - 19,39,80,17,42,48,51,87,78,80,32,96,68,95,30,14,36,79,33,4,10,20,57,60,51,12,82,30,49,42,94,96,48,74,84,95,31,21,29,67,65,64
const rotateArrayLeft = (array, k) => { const rotations = k % array.length; return [...array.slice(rotations), ...array.slice(0, rotations)]; };
const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);

grape

const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));
const countOccurrences = (array, value) => array.reduce((count, current) => (current === value ? count + 1 : count), 0);
const getRandomElement = array => array[getRandomIndex(array)];

const reverseWords = str => str.split(" ").reverse().join(" ");
const findMissingNumber = array => { const n = array.length + 1; const expectedSum = (n * (n + 1)) / 2; const actualSum = array.reduce((sum, num) => sum + num, 0); return expectedSum - actualSum; };
kiwi

const capitalizeFirstLetter = str => str.charAt(0).toUpperCase() + str.slice(1);
